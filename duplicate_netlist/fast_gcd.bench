# http://web.cecs.pdx.edu/~mperkows/CLASS_VHDL/VHDL/gcd/assignme.htm
# register 0
R0_OUT_0 = DFF(R0_IN_0)
R0_OUT_1 = DFF(R0_IN_1)
R0_OUT_2 = DFF(R0_IN_2)
R0_OUT_3 = DFF(R0_IN_3)
# register 1
R1_OUT_0 = DFF(R1_IN_0)
R1_OUT_1 = DFF(R1_IN_1)
R1_OUT_2 = DFF(R1_IN_2)
R1_OUT_3 = DFF(R1_IN_3)
# comparator 0
COMP0_0 = NXOR(R0_OUT_0, R1_OUT_0)
COMP0_1 = NXOR(R0_OUT_1, R1_OUT_1)
COMP0_2 = NXOR(R0_OUT_2, R1_OUT_2)
COMP0_3 = NXOR(R0_OUT_3, R1_OUT_3)
COMP0 = AND(COMP0_0, COMP0_1, COMP0_2, COMP0_3)
# MUX(COMP, 1, 0)
R0_IN_0 = MUX(COMP0, R0_OUT_0, MUX0_OUT_0)
R0_IN_1 = MUX(COMP0, R0_OUT_1, MUX0_OUT_1)
R0_IN_2 = MUX(COMP0, R0_OUT_2, MUX0_OUT_2)
R0_IN_3 = MUX(COMP0, R0_OUT_3, MUX0_OUT_3)
R1_IN_0 = MUX(COMP0, R1_OUT_0, MUX1_OUT_0)
R1_IN_1 = MUX(COMP0, R1_OUT_1, MUX1_OUT_1)
R1_IN_2 = MUX(COMP0, R1_OUT_2, MUX1_OUT_2)
R1_IN_3 = MUX(COMP0, R1_OUT_3, MUX1_OUT_3)
# subtractor 0
# Bcompl <= NOT B;
Bcompl_0 = NOT(B_0)
Bcompl_1 = NOT(B_1)
Bcompl_2 = NOT(B_2)
Bcompl_3 = NOT(B_3)
# P <= A XOR Bcompl;
P0_0 = XOR(A_0, Bcompl_0)
P0_1 = XOR(A_1, Bcompl_1)
P0_2 = XOR(A_2, Bcompl_2)
P0_3 = XOR(A_3, Bcompl_3)
# G <= A AND Bcompl;
G0_0 = AND(A_0, Bcompl_0)
G0_1 = AND(A_1, Bcompl_1)
G0_2 = AND(A_2, Bcompl_2)
G0_3 = AND(A_3, Bcompl_3)
# C(0) <= '1';
C0_0 = vdd
# C(i) <= G(i-1) OR (P(i-1) AND C(i-1));
C0_1_AUX = AND(P0_0, C0_0)
C0_1 = OR(G0_0, C0_1_AUX)
C0_2_AUX = AND(P0_1, C0_1)
C0_2 = OR(G0_1, C0_2_AUX)
C0_3_AUX = AND(P0_2, C0_2)
C0_3 = OR(G0_2, C0_3_AUX)
# AminusB(i) <= P(i) XOR C(i);
AminusB_0 = XOR(P0_0, C0_0)
AminusB_1 = XOR(P0_1, C0_1)
AminusB_2 = XOR(P0_2, C0_2)
AminusB_3 = XOR(P0_3, C0_3)
# subtractor 1
# Acompl <= NOT A;
Acompl_0 = NOT(A_0)
Acompl_1 = NOT(A_1)
Acompl_2 = NOT(A_2)
Acompl_3 = NOT(A_3)
# P <= B XOR Acompl;
P1_0 = XOR(B_0, Acompl_0)
P1_1 = XOR(B_1, Acompl_1)
P1_2 = XOR(B_2, Acompl_2)
P1_3 = XOR(B_3, Acompl_3)
# G <= B AND Acompl;
G1_0 = AND(B_0, Acompl_0)
G1_1 = AND(B_1, Acompl_1)
G1_2 = AND(B_2, Acompl_2)
G1_3 = AND(B_3, Acompl_3)
# C(0) <= '1';
C1_0 = vdd
# C(i) <= G(i-1) OR (P(i-1) AND C(i-1));
C1_1_AUX = AND(P1_0, C1_0)
C1_1 = OR(G1_0, C1_1_AUX)
C1_2_AUX = AND(P1_1, C1_1)
C1_2 = OR(G1_1, C1_2_AUX)
C1_3_AUX = AND(P1_2, C1_2)
C1_3 = OR(G1_2, C1_3_AUX)
# AminusB(i) <= P(i) XOR C(i);
BminusA_0 = XOR(P1_0, C1_0)
BminusA_1 = XOR(P1_1, C1_1)
BminusA_2 = XOR(P1_2, C1_2)
BminusA_3 = XOR(P1_3, C1_3)
# multiplexer 0
MUX0_OUT_0 = MUX(C0_3, AminusB_0, R0_OUT_0)
MUX0_OUT_1 = MUX(C0_3, AminusB_1, R0_OUT_1)
MUX0_OUT_2 = MUX(C0_3, AminusB_2, R0_OUT_2)
MUX0_OUT_3 = MUX(C0_3, AminusB_3, R0_OUT_3)
# multiplexer 1
MUX1_OUT_0 = MUX(C1_3, BminusA_0, R1_OUT_0)
MUX1_OUT_1 = MUX(C1_3, BminusA_1, R1_OUT_1)
MUX1_OUT_2 = MUX(C1_3, BminusA_2, R1_OUT_2)
MUX1_OUT_3 = MUX(C1_3, BminusA_3, R1_OUT_3)
# wire
# wire subtractor 0
A_0 = BUF(R0_OUT_0)
A_1 = BUF(R0_OUT_1)
A_2 = BUF(R0_OUT_2)
A_3 = BUF(R0_OUT_3)
B_0 = BUF(R1_OUT_0)
B_1 = BUF(R1_OUT_1)
B_2 = BUF(R1_OUT_2)
B_3 = BUF(R1_OUT_3)
OUTPUT(AminusB_0)
OUTPUT(AminusB_1)
OUTPUT(AminusB_2)
OUTPUT(AminusB_3)
OUTPUT(MUX0_OUT_0)
OUTPUT(MUX0_OUT_1)
OUTPUT(MUX0_OUT_2)
OUTPUT(MUX0_OUT_3)
OUTPUT(MUX1_OUT_0)
OUTPUT(MUX1_OUT_1)
OUTPUT(MUX1_OUT_2)
OUTPUT(MUX1_OUT_3)
OUTPUT(A_0)
OUTPUT(A_1)
OUTPUT(A_2)
OUTPUT(A_3)
OUTPUT(B_0)
OUTPUT(B_1)
OUTPUT(B_2)
OUTPUT(B_3)
OUTPUT(C0_3)
